#include <stdio.h>
#include <stdlib.h>
#include <tgmath.h>

#define TamCache 32
#define TamBloc 8

int TamTag = log2(pow(2, 10)/TamCache);
int TamOffset = log2(TamBloc);
int TamIndice = log2(TamCache/TamBloc);
	
typedef struct palavra{
	char word[10];
}Palavra;



/*********   Calcula Tag   *********/
int CalculaTag (){
	int Tag = 1024 / TamCache;
	return Tag;
}


/*********   Calcula Indice   *********/
int CalculaIndice(){
	int Indice = TamCache / TamBloc;	
	return Indice;
}

/*********   int --> bit   *********/
void Intobin(char *vet, int tam, int n){
	int i;
	for (i=tam-1 ; i>=0 ; i--){
		if (n < 1){
			vet[i] = '0';
		}else{
			if(vet[i] = (n % 2)==1) vet[i] = '1';
			else (vet[i] = '0');
		};
		n = n / 2;
	};
};


/*********   bit --> int   *********/
int Bintoint(int *vet, int tam){
	int i, n=0, aux=0;
	for (i=tam-1 ; i>=0 ; i--){
		n = n + vet[i]*pow(2 ,(aux));
		aux++;
	};
	return n;
};

void Hit(Palavra cache[TamIndice][TamOffset], char *binn){
	int i, j, h, aux=0, aux1=0,aux2=0;
	for (i = 0; i < 4; i++){
		for (j = 0; j < 10 ; j++){
			if(j < TamTag+TamIndice){
				if(cache[i][0].word[j]==binn[j]){
					aux++;
				};	
				if(j>=TamTag && j < TamTag+TamIndice){
					if(cache[i][0].word[j]==binn[j]){
					aux2++;
				};
				};
			};
		};
		if(aux == TamTag+TamIndice){
			printf("Hit");
			break;
		};
		if(aux2==TamIndice){
			printf("Miss Hit!");
			for(h=0;h<TamTag;h++){
				cache[i][0].word[h]=binn[h];	
			};
			break;
		};
		aux1++;
		aux = 0;
	};
	
	
};
void vazia(Palavra cache[TamIndice][TamOffset]){
	int i, j, h;
	for (i = 0; i < 4; i++){
		for (j = 0; j < TamOffset; j++){
			for (h = 0; h < 10; h++){
				cache[i][j].word[h]=0;
			};
		};
	};
};

void insereIndOff(char *bin, char cache[TamIndice][TamOffset]){
	int i, j, h=0;
	char Offset[TamCache/TamBloc];
	char Index[TamCache/TamBloc];
	int linha = h+TamTag+TamIndice-1;
	int aux = h-TamTag-TamIndice;
		
	for(i=0; i < TamCache/TamBloc;i++){
		Intobin(Offset, TamCache/TamBloc, i);
		Intobin (Index, TamCache/TamBloc, i);
		for(j = 0; j<TamBloc; j++){
			for(h=0;h<10;h++){
				if(h>TamTag-1 && h<10-TamOffset)
					cache[i][j].word[linha]=Offset[aux];
				if(h < TamTag) 
					cache[i][j].word[h]=Index[h];
			};
		};
	};
	
};
void imprime(cache[TamIndice][TamOffset]){	
	for (i = 0; i < TamIndice; i++){
		for (j = 0; j < TamOffset; j++){
			for (h = 0; h < 10; h++){
				if(i!=0){
					if(h)
					printf("%c")cache[i][j].word[h]=0;	
				};
				
			};
		};
	};
};

	
FILE*arquivo;
char op[7];
char bin [10];
char num [4];

void main(){
	arquivo = fopen("docteste.txt", "r");
	int ch = 0, i, j,h;
	
	while (ch != EOF){
		fscanf(arquivo, "%s", op);
		printf("%s ", op);
	
		fscanf(arquivo, "%s", bin);
		printf("%s ", bin);
	
		fscanf(arquivo, "%s", num);
		printf("%s\n", num);
		
		char vettag[TamCache/TamBloc][TamTag];
		char vetindex[TamCache/TamBloc][TamIndice];
		char vetoffset[TamOffset];
		Palavra cache[TamCache/TamBloc][TamOffset];
		
		for (i=0 ; i<TamTag ; i++){
			vettag[0][i] = bin[i];
			printf("%c", vettag[0][i]);
		}
		printf("\n");
		for (i=TamTag ; i<TamIndice+TamTag ; i++){
			vetindex[0][i] = bin[i];
			printf("%c", vetindex[0][i]);
		}
		printf("\n");
		for (i=TamIndice+TamTag ; i<TamIndice+TamTag+TamOffset ; i++){
			cache[0][0].word[i] = bin[i];
			printf("%c", cache[0][0].word[i]);
		}
		printf("\n");
		
		
		
		leitura(cache, bin);
	
		ch = getc(arquivo);	
		
		
		
	};
}
	
/*	
	for (i = 0; i < 10; i++){
		printf("%c",cache[0][0].word[i]);
		
		};
	//CRIAR ESSA FUNÇÃO

		printf("\n");	
		for (i=0;i<b;i++){
		
			for (j=0;j<h;j++){
				Cache[i][j].Ativo = 0;
				Cache[i][j].Index = i;
				Cache[i][j].Offset = aux1;
				Cache[i][j].Tag = 0;;
				if(aux == h){
					aux1=0;
				};
			aux1++;
			};	
				
		};
		
		//##################
		
		//FUNCAO BUSCAR/INSERIR TAG 
		
		
		do{
			i=0;
			j=0;
			aux1=0;
			printf("\ndigite a tag\n");
			scanf ("%d", &t);
			for(i=0;i<b;i++){
				if(Cache[i][j].Tag == t){
					printf("Hit!\n");
					break;
				};
				if(Cache[i-1][j-1].Tag==t){
					break;
				}
				for(j=0;j<h;j++){
					if(Cache[i][j].Ativo == 0){
						Cache[i][j].Tag = t;
						Cache[i][j].Ativo = 1;
					}
					aux1 ++;
				};
			};
			
			if(aux1==b-1){
				srand(time(NULL));
				i = rand() % aux1;
				for(j=0;j<h;i++){
					Cache[b][j].Tag = i;
					
				};
				printf ("deveria ser salvo o novo tag aqui %d", i);
				
			};
			
			
			
			//##################
			
			printf("\nIMPRIMIR A CACHE (0 PARA NÃO)\n\n");
			scanf("%d", &r);
				
			if(r !=0){
				for(i=0;i<b;i++){
					
					for(j=0;j<h;j++){
						printf("t%di%do%d ", Cache[i][j].Tag, Cache[i][j].Index, Cache[i][j].Offset);
					}
					printf("\n");
				}
			
			}
			
			
			printf("\ndeseja fazer outra operacao (0 para nao)\n\n");
			scanf("%d", &r);
	
	    }while (r != 0);	
};
	
*/
	
	
	
	
 

